#如何控制线程形为！


属性对象：

1.初始化属性对象
2.销毁属性对象
3.获取属性值
4.设置属性值

int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_destroy(pthread_attr_t *attr);

int pthread_attr_setdetachstate(const pthread_attr_t *restrict attr, int &detachstate);
int pthread_attr_getdetachstate(pthread_attr_t *attr,int *detachstate);

对线程栈属性进行管理		(因为同一进程的所有线程要共享固定大小的虚地址空间)
//手动
int pthread_attr_getstack(const pthread_attr_t *restrict attr,
							void **restrict stackaddr,
							size_t *restrict stacksize);							
int pthread_attr_setstack(pthread_attr_t *attr,
							void *stackaddr,
							size_t stacksize);//改变新建线程的栈位置|stackaddr指定线程的内存范围中的最低可寻址地址|
//半自动
int pthread_attr_getstacksize(const pthread_attr_t *restrict attr,
										size_t *restrict stacksize);
int pthread_attr_setstacksize(pthread_attr_t *attr,size_t stacksize);//希望改变默认的栈的大小，但是又不想自己处理线程的分配问题

//控制线程栈末尾之后用以避免栈溢出的扩展内存的大小
int pthread_attr_getguardsize(const pthread_attr_t *restrict attr,
							size_t *restrict guardsize);
int pthread_attr_setguardsize(pthread_attr_t *attr,size_t guardsize);



同步属性
1.互斥量属性	
	pthread_mutexattr_t 
int pthread_mutexattr_init(pthread_mutexattr_t *mutexattr);		//用默认的互斥量属性初始化互斥量属性结构mutexattr
int pthread_mutexattr_destroy(pthread_mutexattr_t *mutexattr);


	1.1.进程共享属性	( 被单个进程的线程共享-- PTHREAD_PROCESS_SHARED、还是被多进程的线程共享-- PTHREAD_PROCESS_PRIVATE )
int pthread_mutexattr_getshared(const pthread_mutexattr_t *restrict attr,
							int *restrict pshared);//获取进程共享属性
							
int pthread_mutexattr_setshared(pthread_mutexattr_t *attr,
							int pshared);//修改进程共享属性
							
	1.2.健壮属性	(多个进程间共享互斥量时:当持有互斥量的进程终止时，需要解决互斥量的状态恢复的问题，由于很难恢复，因此
int pthread_mutexattr_gettobust(const pthread_mutexattr_t *restrict attr,
							int *restrict robust);

int pthread_mutexattr_settobust(pthread_mutexattr_t *restrict attr,
							int robust);						
//当设置attr=PTHREAD_MUTEX_ROBUST后,若有线程掉用pthread_mutex_lock获取互斥量、
而该锁被另一个进程持有，但它终止时并没有对该锁进行解锁、此时线程会阻塞、从pthread_mutex_lock返回的值是EOWNERDEAD而不是0。
应用程序可以通过这个特殊的返回值获知，若有可能，不管它们保护的互斥量状态如何，都需要进行状态恢复。
如果应用状态无法恢复，在线程对互斥量解锁以后，该互斥量将会处于永久不可用的状态

int pthread_mutex_consistent(pthread_mutex_t *mutex);
//若应用状态无法恢复，在线程对互斥量解锁以后，该互斥量将处于永久不可用的状态。
为了避免这样的问题。线程可以调用 pthread_mutex_consistent函数，指明与该互斥量相关的状态在互斥量解锁之前是一致的。
如果线程没有先调用pthread_mutex_consistent就对互斥量进行解锁，那么其他试图获取该互斥量的线程就会得到错误码ENOTRECOVERABLE。
如果发生这种情况，互斥量将不再可用。线程可以通过提前调用pthread_mutex_consistent，能让互斥量正常工作，这样它就可被持续使用。
	
	1.3.类型属性
int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict mutex,int *restrict type);//得到互斥量类型
int pthread_mutexattr_settype(pthread_mutexattr_t *restrict mutex,int type);//得到互斥量类型


2.读写锁属性(读写锁支持的唯一属性是进程共享属性)
	int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
	int pthread_rwlockattr_destory(pthread_rwlockttr_t *attr);
	
	int pthread_rwlockattr_getshared(const pthread_rwlockattr_t *restrict attr,int *restrict attr);
	int pthread_rwlockattr_setshared(pthread_rwlockattr_t *attr,int pshared);
	
3.条件变量属性
	int pthread_condattr_init(pthread_condattr_t *conattr);
	int pthread_condattr_destory(pthread_condattr_t *conattr);
	
	int pthread_condattr_getpshared(const pthread_condattr_t *restrict attr,int *restrict pshared);
	int pthread_condattr_setpshared(pthread_condattr_t *attr,int pshared);
	
	int pthread_condattr_getlock(const pthread_condattr_t *restrict attr,clockid_t *restrict clock_id);
	int pthread_condattr_setlock(pthread_condattr_t *attr,clockid_t clock_id);
	
	
4.屏障属性
	int pthread_barrierattr_init(const pthread_barrierattr_t *restrict attr);
	int pthread_barrierattr_desory(pthread_barrierattr_t *attr);
	
	int pthread_barrierattr_getshared(const pthread_barrierattr_t *restrict attr，int *restrict pshared);
	int pthread_barrierattr_setshared(pthread_barrierattr_t *restrict attr，int *restrict pshared);
	
	























