1. 半双工管道		管道只能在具有公共祖先的两个进程之间使用
int pipe(int fd[2]);//fd[0]读，fd[1]写，fd[1]的输出是fd[0]的输入  fd[1]------->fd[0]

//创建一个链接到
FILE *popen(const char *cmdstring,const char *type);
//先执行fork，然后调用exec执行cmdstring,并且返回一个标准I/O文件指针。这个文件指针就是此执行的cmdstring得到的文件描述符（一切皆文件）
//若type = 'r',则fp连接到cmdstring的标准输出，若为'w',则fp连接到cmstring的标准输入
//cmdstring 由Boure shell以下列方式执行
	sh -c cmdstring
	
int pclose(FILE *fp);//关闭标准I/O流，等待命令终止,然后返回shell的终止状态

2. FIFO  命令管道(因为未命名的管道只能在两个相关的、具有共同祖先的进程间使用,于是，通过FIFO，不相关的进程之间也可能交换数据)
int mkfifo(const char *path,mode_t mode);

int mkfifoat(int fd,const char *path,mode_t mode);//mode参数等同于open的mode参数
	path:
		1. 绝对路径，则忽略fd,<==>mkfifo 
		2. 相对路径，则fd是一个打开目录的有效文件描述符，路径名和目录有关
		3. 相对路径，且fd参数有一个特殊值AT_FDCWD,则路径名以当前目录开始，mkfifoat和mkfifo类似
	创建一个FIFO，则打开它要用open。
	
	因为FIFO具有name,所以它可用于非线程连接
3. 全双工管道
4. 命名全双工管道

5. XSI消息队列、XSI信号量、XSI共享存储

8. 消息队列


9. 信号量


10. 共享存储(实时)
//两个进程共享一块内存区域，这样就能以最快的方式进行通信，与此带来的就是进程间的同步问题

struct shmids_ds
{
	struct ipc_perm shm_perm;
	size_t shm_segsz;
	pid_t	shm_lpid;
	pid_t 	shm_cpid;
	shmatt_t shm_nattach;
	time_t shm_atime;
	time_t shm_dtime;
	time_t shm_ctime;
	...
};

int shmget(key_t key,size_t size,int flag);//获得一个共享存储标识
//size	共享存储段的长度(字节为单位)

int shmctl(int shmid,int cmd,struct shmid_ds *buf);

int *shmat(int shmid,const void *addr,int flag);//当创建好一个共享存储段后，进程就可调用shmat将其连接到它的地址空间中。





























//支持不同主机上的进程的通信
11. 套接字
12. STREAMS



