void (*signal(int signo,void (*func)(int)))(int);


sigset_t 信号屏蔽字

int kill(pid_t pid,int signo);	//允许进程将信号发送给进程或进程组
1.pid = 0，将信号发送给与发送进程同一进程组的所有进程
2.pid = -1,将信号发送给发送进程有权限向它们发送信号的所有进程。
3.pid < 0,绝对值

发送权限：发送进程的rid或者eid等于接收进程rid或者eid

int raise(int signo);//允许进程向自身发送信号
unsigned int alarm(unsigned int seconds);//会设置一个定时器，当定时器超时后，会产生一个SIGALRM信号，默认动作是终止调用该alarm函数的进程
1.每个进程只能有一个闹钟时间，若再次调用alarm之前，之前已为该进程注册的闹钟时间还没有超时，则该闹钟时间的余留值作为本次alarm函数调用的值返回。
2.如果之前设置的闹钟超时时间大于本次设置值，则用本次时间重置此闹钟


int	pause(void);//使线程or进程睡眠，直到一个终止进程或者触发一个信号捕捉函数的信号(捕捉到一个信号)到达。


信号集
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sigaddset(sigset_t *set,int signo);
int sigdelset(sigset_t *set,int signo);
int sigismember(sigset_t *set,int signo);

//逗号运算符
逗号运算符是指在C语言中，多个表达式可以用逗号分开，其中用逗号分开的表达式的值分别结算，但整个表达式的值是最后一个表达式的值。

#define sigemptyset(ptr) (*(ptr) = 0)
#define sigfillset(ptr)  (*(ptr) = ~(sigset_t)0,0)

信号屏蔽字：规定了当前阻塞而不能传递给该进程的信号集

int sigprocmask(int how,sigset_t *restrict set,sigset_t *restrict oset);//仅为单线程进程定义的
//how:(set != NULL)
SIG_BLOCK	realsignmask = (当前阻塞信号 | set)
SIG_UNBLOCK	realsignmask = (当前阻塞信号 & set)
SIG_SETMASK realsignmask = (当前阻塞信号 = set)

若 oset ！= NULL,则将设置set之前的当前阻塞信号赋值给oset.

int sigpending(sigset_t *set);//通过set返回进程的未决信号集

int sigaction(int signo,const struct sigatcion *restrict act,
					struct sigaction *restrict oact);
//signo:要检测或修改其具体动作的信号编号。			
//act: acl != NULL,则修改其动作
//oact:oact != NULL,则返回该信号的上一个动作

struct sigaction
{
	void (*sa_handler)(int);	//信号捕捉函数、SIG_IGN、SIG_DFL
	sigset_t sa_mask;
	int sa_flags;
	//
	void (*sa_sigaction)(int,siginfo_t *,void*);
};



在信号处理程序中经常调用longjmp函数以返回程序的主循环，而不是从该处理程序返回
但是,在信号捕获函数捕获到这个信号后,此信号会被加入信号屏蔽字（防止之后该信号中断信号处理程序），
但是一个问题，若在信号处理程序中使用longjmp函数跳出信号处理例程，则信号屏蔽字没有恢复，就会导致问题。

因此引出：
int sigsetjmp(sigjmp_buf env,int savemask);//若savemask!=0,则保存当前进程的信号屏蔽字
void siglongjmp(sigjmp_buf env,int val);	//若env！=0，则将env用于恢复当前信号屏蔽字

int sigsuspend(const sigset_t *sigmask) 
	暂时用信号集sigmask代替调用进程的信号集，直到收到一个唤醒一个信号例程或者杀死一个进程的信号。
       如果收到的信号终止了这个进程，则sigsuspend() 就不返回.  如果这个信号被捕获,  则sigsuspend()返回
       在信号处理例程返回后, 信号屏蔽字就恢复为调用suspend之前的水平。

void abort(void);//使程序异常终止(将SIGABRT信号发送给调用进程)
	让进程捕捉SIGABRT的意图是：在进程终止之前由其执行所需的清理操作，如果进程不在信号处理例程终止自己，POSIX.1声明当信号处理程序返回时，abort终止该进程。


void psignal(int signo,const char *msg);	//通过提供的signo,得到它的处理程序的程序名（msg指向)并输出到标准错误文件

void psiginfo(const siginfo_t *info,const char *msg);//x




















